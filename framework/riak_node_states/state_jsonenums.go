// generated by jsonenums -type=State; DO NOT EDIT

package riak_node_states

import (
	"encoding/json"
	"fmt"
)

var (
	_StateNameToValue = map[string]State{
		"Unknown":      Unknown,
		"Starting":     Starting,
		"Started":      Started,
		"ShuttingDown": ShuttingDown,
		"Shutdown":     Shutdown,
	}

	_StateValueToName = map[State]string{
		Unknown:      "Unknown",
		Starting:     "Starting",
		Started:      "Started",
		ShuttingDown: "ShuttingDown",
		Shutdown:     "Shutdown",
	}
)

func init() {
	var v State
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_StateNameToValue = map[string]State{
			interface{}(Unknown).(fmt.Stringer).String():      Unknown,
			interface{}(Starting).(fmt.Stringer).String():     Starting,
			interface{}(Started).(fmt.Stringer).String():      Started,
			interface{}(ShuttingDown).(fmt.Stringer).String(): ShuttingDown,
			interface{}(Shutdown).(fmt.Stringer).String():     Shutdown,
		}
	}
}

// MarshalJSON is generated so State satisfies json.Marshaler.
func (r State) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _StateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid State: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so State satisfies json.Unmarshaler.
func (r *State) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("State should be a string, got %s", data)
	}
	v, ok := _StateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid State %q", s)
	}
	*r = v
	return nil
}
